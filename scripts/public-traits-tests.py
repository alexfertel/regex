#!/usr/bin/env python3

from subprocess import run
import datetime
import json
import os
from pprint import pprint

PREAMBLE = '''
// DO NOT EDIT. Automatically generated by 'scripts/public-traits-tests.py'
// on {date}.
'''.lstrip()

CMD = ["cargo", "rustdoc", "-q", "--", "-Z", "unstable-options", "--output-format", "json"]

def get_public_of_kind(kinds, elements, index):
    keys_of_kind = filter(lambda key: index[key]['kind'] in kinds, elements)
    public_of_kind = filter(lambda key: index[key]['visibility'] == 'public', keys_of_kind)
    return map(lambda key: index[key], public_of_kind)

def gen_test(path):
    return f"assert_marker_traits::<{path}>();"

def gen_tests():
    doc_gen_result = run(CMD)
    if doc_gen_result.returncode != 0:
        print("Unable to generate the docs for the regex")
        exit(1)

    with open(os.path.join("target", "doc", "regex.json")) as docs_file:
        docs = json.load(docs_file)
        index = docs['index']

        tests = []
        public_modules = get_public_of_kind(['module'], index.keys(), index)
        for mod in public_modules:
            tests.append('')
            types = get_public_of_kind(['struct'], mod['inner']['items'], index)
            for type in types:
                # if mod['name'] == 'regex' and type['name'] == 'CaptureMatches':
                #     for key in type['inner']['impls']:
                #         # for impl in index[key]:
                #         pprint(index[key])


                prefix = '' if mod['inner']['is_crate'] else 'regex::'
                test = gen_test(f"{prefix}{mod['name']}::{type['name']}")
                tests.append(test)

        return tests




def get_assert_definition():
    return "\tfn assert_marker_traits<T: Send + Sync + UnwindSafe + RefUnwindSafe>() {}\n"
    
def main():
    with open(os.path.join("tests", "marker_traits.rs"), 'w') as f:
        f.write(PREAMBLE.format(date=str(datetime.datetime.now())))
        f.write('\n')
        f.write("#[test]\nfn marker_traits() {\n")
        f.write("\tuse std::panic::{RefUnwindSafe, UnwindSafe};\n")
        f.write(get_assert_definition())
        for test in gen_tests():
            f.write(f"\t{test}\n")
        f.write("}\n")


if __name__ == '__main__':
    main()

